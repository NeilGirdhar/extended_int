[build-system]
requires = ['setuptools', 'poetry_core>=1.0']
build-backend = 'poetry.core.masonry.api'

[tool.poetry]
name = 'extended_int'
version = '0.7'
description = "Python classes that provides support for extended integers (the set of integers, and infinity)."
license = 'MIT'
authors = ['Neil Girdhar <mistersheik@gmail.com>']
readme = 'README.rst'
repository = 'https://github.com/NeilGirdhar/extended_int'
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Typing :: Typed']

[tool.poetry.dependencies]
python = '>=3.9, <4'

[tool.poetry.dev-dependencies]
isort = '>=5.8'
jupyter = '>=1'
mypy = '>=0.930'
pylint = '>=2.8'
pyright = ">=0.0.13"
pylint-pytest = ">=1.1.2"
pytest = '^7'
ruff = '>=0'

[tool.isort]
line_length = 100
multi_line_output = 0
skip_glob = ['.pytype/*.py']

[tool.pycodestyle]
max-line-length = 100
exclude = ['__init__.py', '__pycache__', 'backup', 'README.rst', 'todo.txt']

[tool.pytest.ini_options]
addopts = '--disable-warnings'

[tool.pytype]
disable = 'ignored-abstractmethod'

[tool.pylint.master]
jobs = 0
load-plugins=['pylint_pytest']
extension-pkg-whitelist = [
    'PySide6',
    'matplotlib.backends']

[tool.pylint.messages_control]
disable = [
    'abstract-method',
    'arguments-differ',
    'duplicate-code',
    'invalid-name',
    'invalid-unary-operand-type',
    'missing-docstring',
    'no-member',
    'self-cls-assignment',
    'too-few-public-methods',
    'too-many-ancestors',
    'too-many-arguments',
    'too-many-branches',
    'too-many-instance-attributes',
    'too-many-locals',
    'too-many-return-statements',
    'too-many-statements',
    'unused-argument']
enable= [
    'useless-suppression',
    'use-symbolic-message-instead']

[tool.pylint.reports]
output-format = 'colorized'

[tool.pylint.similarities]
min-similarity-lines = 20
ignore-imports = 'yes'

[tool.pyright]
stubPath = ""
reportPrivateImportUsage = false
reportUnnecessaryTypeIgnoreComment = true

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
pretty = false
show_error_codes = true
show_error_context = false
strict_equality = true
warn_redundant_casts = true
# warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
select = ["F", "E", "W", "I", "N", "D", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "C4",
    "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "RSE", "RET", "SLF", "SIM",
    "TID", "PTH", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["B008", "B011", "D100", "D101", "D102", "D107", "S101", "D103", "D105",
    "SIM117", "ANN101", "ANN102", "ANN401", "TID252", "FBT003", "I001", "G004",
    "PT015", "PGH003"]
line-length = 100
target-version = "py310"
extend-exclude = ["__init__.py"]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.flake8-errmsg]
max-string-length = 40

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.pylint]
max-args = 8
